plugins {
  id "kz.greetgo.upload-to-maven" version "0.0.5"
}


apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'maven'
apply plugin: 'idea'
apply plugin: 'signing'

group = 'kz.greetgo'

sourceCompatibility = 1.8
version = '0.1.0'

uploadToMavenCentral {
  description = "Email-send method using in greetgo!"
  url = 'https://github.com/greetgo/greetgo.email'
  scm.url = 'https://github.com/greetgo/greetgo.email.git'
  developer {
    id = 'pompei'
    name = 'Evgeniy Kolpakov'
    email = 'ekolpakov@greet-go.com'
  }
}


def ggRepo = System.getenv('GG_REPO')

repositories {
  mavenLocal()
  if (ggRepo?.trim()) maven { url ggRepo.trim() }
  mavenCentral()
}

dependencies {
  ext.springVersion = "3.0.7.RELEASE"

  compile 'com.google.code.findbugs:annotations:2.0.1'

  compile 'javax.mail:mail:1.4.7'
  compile 'org.easytesting:fest-assert-core:2.0M10'

  testCompile 'org.testng:testng:6.5.1'

}

test { useTestNG() }

tasks.withType(Javadoc) {
  options.addStringOption('Xdoclint:none', '-quiet')
  options.addStringOption('encoding', 'UTF-8')
  options.addStringOption('charSet', 'UTF-8')
}

test.useTestNG()

idea.module.downloadSources = true
idea.module.downloadJavadoc = true
idea.module.inheritOutputDirs = false
idea.module.outputDir = file("$buildDir/classes/main/")
idea.module.testOutputDir = file("$buildDir/classes/test/")

sourceSets.main.java.srcDirs = ["src"]
sourceSets.test.java.srcDirs = ["test_src"]
sourceSets.main.resources.srcDirs = ["src_resources"]
sourceSets.test.resources.srcDirs = ["test_resources"]

sourceSets.main.resources {
  srcDirs += sourceSets.main.java.srcDirs
  exclude '**/*.java'
}
sourceSets.test.resources {
  srcDirs += sourceSets.test.java.srcDirs
  exclude '**/*.java'
}

jar {
  manifest {
    attributes 'Specification-Title': project.name
    attributes 'Specification-Version': archiveVersion
    attributes 'Specification-Vendor': "greetgo!"
    attributes 'Created-By': System.getProperty("user.name")
    attributes 'Created-At': new Date().format("yyyy-MM-dd/HH:mm:ss")
    attributes 'Git-Last-Commit-Id': extractLastGitCommitId()
  }
}

def extractLastGitCommitId() {
  def gitFolder = "${rootProject.projectDir}/.git/"

  def takeFromHash = 17

  //noinspection GroovyAssignabilityCheck
  if (!new File(gitFolder + "HEAD").exists()) {
    return "UNKNOWN"
  }

  /*
   * '.git/HEAD' contains either
   *      in case of detached head: the currently checked out commit hash
   *      otherwise: a reference to a file containing the current commit hash
   */
  //noinspection GroovyAssignabilityCheck
  def head = new File(gitFolder + "HEAD").text.split(":") // .git/HEAD
  def isCommit = head.length == 1 // e5a7c79edabbf7dd39888442df081b1c9d8e88fd
  // def isRef = head.length > 1     // ref: refs/heads/master

  if (isCommit) {
    return head[0].trim().take(takeFromHash) // e5a7c79edabb
  }

  def reference = head[1].trim()

  //noinspection GroovyAssignabilityCheck
  def refHead = new File(gitFolder + reference) // .git/refs/heads/master
  if (refHead.exists()) {
    return refHead.text.trim().take(takeFromHash)
  }

  //noinspection GroovyAssignabilityCheck
  def packedRefsFile = new File(gitFolder + "packed-refs")

  if (packedRefsFile.exists()) {

    def lines = packedRefsFile.text.split("\n")

    for (String line : lines) {

      if (line.trim().startsWith("#")) {
        continue
      }

      def split = line.split("\\s+")
      if (split.length == 2) {

        if (split[1] == reference) {
          return split[0]
        }

      }
    }

  }

  throw new Exception("Cannot find commit id")
}
